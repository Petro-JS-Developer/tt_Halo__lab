[{"D:\\work\\GitHub\\workArea\\testTask\\tt_Halo__lab\\src\\index.js":"1","D:\\work\\GitHub\\workArea\\testTask\\tt_Halo__lab\\src\\App.jsx":"2","D:\\work\\GitHub\\workArea\\testTask\\tt_Halo__lab\\src\\Components\\Cards\\Cards.jsx":"3","D:\\work\\GitHub\\workArea\\testTask\\tt_Halo__lab\\src\\api\\index.js":"4","D:\\work\\GitHub\\workArea\\testTask\\tt_Halo__lab\\src\\Components\\Card\\Card.jsx":"5","D:\\work\\GitHub\\workArea\\testTask\\tt_Halo__lab\\src\\Components\\ModalWindow\\index.js":"6","D:\\work\\GitHub\\workArea\\testTask\\tt_Halo__lab\\src\\Components\\ModalWindow\\ModalWindow.jsx":"7","D:\\work\\GitHub\\workArea\\testTask\\tt_Halo__lab\\src\\Components\\Card\\index.js":"8","D:\\work\\GitHub\\workArea\\testTask\\tt_Halo__lab\\src\\Components\\Form\\Form.jsx":"9","D:\\work\\GitHub\\workArea\\testTask\\tt_Halo__lab\\src\\Components\\Form\\index.js":"10"},{"size":220,"mtime":1612523719878,"results":"11","hashOfConfig":"12"},{"size":1075,"mtime":1614328135456,"results":"13","hashOfConfig":"12"},{"size":1184,"mtime":1614335872761,"results":"14","hashOfConfig":"12"},{"size":132,"mtime":1613826878337,"results":"15","hashOfConfig":"12"},{"size":1079,"mtime":1614335891682,"results":"16","hashOfConfig":"12"},{"size":35,"mtime":1613909445316,"results":"17","hashOfConfig":"12"},{"size":1870,"mtime":1614335854181,"results":"18","hashOfConfig":"12"},{"size":28,"mtime":1613827429295,"results":"19","hashOfConfig":"12"},{"size":5878,"mtime":1614336204770,"results":"20","hashOfConfig":"12"},{"size":24,"mtime":1614335174602,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"12pl32m",{"filePath":"25","messages":"26","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"24"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42"},{"filePath":"43","messages":"44","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"D:\\work\\GitHub\\workArea\\testTask\\tt_Halo__lab\\src\\index.js",[],["45","46","47","48","49","50"],"D:\\work\\GitHub\\workArea\\testTask\\tt_Halo__lab\\src\\App.jsx",["51"],"import React, { useEffect, useState } from 'react';\nimport { getArrGoods } from './api';\nimport './App.scss';\nimport { Cards } from './Components/Cards/Cards';\nimport { ModalWindow } from './Components/ModalWindow';\n\nfunction App() {\n  const [arrGoods, setArrGoods] = useState([]);\n  const [selectGood, setSelectGood] = useState({});\n  const [isOpen, setIsOpen] = useState(false);\n\n  useEffect(() => {\n    getArrGoods()\n      .then((result) => result.json())\n      .then((result) => setArrGoods(result))\n      .catch((err) => alert(err));\n  }, []);\n\n  useEffect(() => {\n    const body = document.querySelector('body');\n    body.style.overflow = isOpen ? 'hidden' : 'auto';\n  }, [isOpen]);\n\n  return (\n    <div className=\"app\">\n      <div className=\"container\">\n        <Cards\n          arrGoods={arrGoods}\n          setSelectGood={setSelectGood}\n          setIsOpen={setIsOpen}\n        />\n        {isOpen ? (\n          <ModalWindow\n            {...selectGood}\n            setIsOpen={setIsOpen}\n          />\n        ) : ''}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","D:\\work\\GitHub\\workArea\\testTask\\tt_Halo__lab\\src\\Components\\Cards\\Cards.jsx",[],"D:\\work\\GitHub\\workArea\\testTask\\tt_Halo__lab\\src\\api\\index.js",[],"D:\\work\\GitHub\\workArea\\testTask\\tt_Halo__lab\\src\\Components\\Card\\Card.jsx",[],"D:\\work\\GitHub\\workArea\\testTask\\tt_Halo__lab\\src\\Components\\ModalWindow\\index.js",[],"D:\\work\\GitHub\\workArea\\testTask\\tt_Halo__lab\\src\\Components\\ModalWindow\\ModalWindow.jsx",[],"D:\\work\\GitHub\\workArea\\testTask\\tt_Halo__lab\\src\\Components\\Card\\index.js",[],"D:\\work\\GitHub\\workArea\\testTask\\tt_Halo__lab\\src\\Components\\Form\\Form.jsx",["52"],"import React, { useEffect, useRef, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\nimport { ReactComponent as CloseIcon } from '../../assets/images/close.svg';\nimport './form.scss';\n\nconst initialValueErrorMessage = {\n  requiredField: '',\n  onlyLetters: '',\n  onlyNumbers: '',\n  minLength12: '',\n};\n\nexport const Form = ({ setIsOpen }) => {\n  const [inputNameValue, setInputNameValue] = useState('');\n  const [inputPhoneValue, setInputPhoneValue] = useState('');\n  const [isInputNameFocus, setIsInputNameFocus] = useState(false);\n  const [isInputPhoneFocus, setIsInputPhoneFocus] = useState(false);\n\n  const [currentField, setCurrentField] = useState('');\n  const [currentError, setCurrentError] = useState('');\n  const [messagesError, setMessagesError] = useState(initialValueErrorMessage);\n\n  const isInitialMount = useRef(true);\n\n  const validateName = () => {\n    if (!inputNameValue) {\n      setMessagesError({ ...messagesError, requiredField: 'This field in required' });\n      setCurrentField('userName');\n      setCurrentError('requiredField');\n      return false;\n    }\n\n    if (!/^[A-Za-z]+$/.test(inputNameValue)) {\n      setMessagesError({ ...messagesError, onlyLetters: 'Only letters allowed' });\n      setCurrentField('userName');\n      setCurrentError('onlyLetters');\n      return false;\n    }\n\n    setMessagesError(initialValueErrorMessage);\n    setCurrentField('');\n    setCurrentError('');\n    return true;\n  };\n\n  const validatePhone = () => {\n    if (!inputPhoneValue && !isInputPhoneFocus) {\n      setMessagesError({ ...messagesError, requiredField: 'This field in required' });\n      setCurrentField('phone');\n      setCurrentError('requiredField');\n      return false;\n    }\n\n    if (!/^\\d+$/.test(inputPhoneValue) && !isInputPhoneFocus) {\n      setMessagesError({ ...messagesError, onlyNumbers: 'Only numbers allowed' });\n      setCurrentField('phone');\n      setCurrentError('onlyNumbers');\n      return false;\n    }\n\n    if ((inputPhoneValue.length > 12 || inputPhoneValue.length < 12) && !isInputPhoneFocus) {\n      setMessagesError({ ...messagesError, minLength12: 'Should contain 12 characters' });\n      setCurrentField('phone');\n      setCurrentError('minLength12');\n      return false;\n    }\n\n    setMessagesError(initialValueErrorMessage);\n    setCurrentField('');\n    setCurrentError('');\n    return true;\n  };\n\n  const formSubmit = (event) => {\n    event.preventDefault();\n    const { userName, phone } = event.target;\n    const isFilValidName = validateName();\n    const isFilValidPhone = validatePhone();\n\n    if (isFilValidName && isFilValidPhone) {\n      console.log(userName.value, phone.value);\n      setInputNameValue('');\n      setInputPhoneValue('');\n      setIsOpen(false);\n      return true;\n    }\n\n    return false;\n  };\n\n  useEffect(() => {\n    if (isInitialMount.current) {\n      isInitialMount.current = false;\n    } else {\n      if (!isInputNameFocus) {\n        validateName();\n      }\n\n      if (!isInputPhoneFocus && validateName()) {\n        validatePhone();\n      }\n\n      if (isInputNameFocus || isInputPhoneFocus) {\n        setMessagesError(initialValueErrorMessage);\n        setCurrentField('');\n        setCurrentError('');\n      }\n    }\n  }, [isInputNameFocus, isInputPhoneFocus]);\n\n  return (\n    <form onSubmit={formSubmit} className=\"formBuy\" noValidate>\n      <div className=\"wrapperInputName\">\n        <div className=\"tooltipUp\">\n          {currentField === 'userName' && <p className=\"tooltipUp__title\">Error</p>}\n          {currentField === 'userName' && (\n            <p className=\"btnClose tooltipUp__btn_red\">\n              <span className=\"btnClose__content fz_20px\">&times;</span>\n            </p>\n          )}\n        </div>\n        <input\n          type=\"text\"\n          name=\"userName\"\n          // eslint-disable-next-line jsx-a11y/no-autofocus\n          // autoFocus\n          className={classnames('formBuy__input formBuy__input_name', !isInputNameFocus && (currentField === 'userName' && currentError ? 'invalid' : 'valid'))}\n          placeholder=\"Name\"\n          onChange={(event) => setInputNameValue(event.target.value)}\n          value={inputNameValue}\n          onFocus={() => setIsInputNameFocus(true)}\n          onBlur={() => setIsInputNameFocus(false)}\n        />\n        <div className=\"tooltipDown\">\n          {currentField === 'userName' && (\n            <p className=\"tooltipDown__text\">\n              {messagesError[currentError]}\n            </p>\n          )}\n        </div>\n      </div>\n      <div className=\"wrapperInputPhone\">\n        <div className=\"tooltipUp\">\n          {currentField === 'phone' && <p className=\"tooltipUp__title\">Error</p>}\n          {currentField === 'phone' && (\n            <p className=\"btnClose tooltipUp__btn_red\">\n              <span className=\"btnClose__content fz_20px\">&times;</span>\n            </p>\n          )}\n        </div>\n        <input\n          type=\"tel\"\n          name=\"phone\"\n          className={classnames('formBuy__input formBuy__input_phone', !isInputPhoneFocus && (currentField === 'phone' && currentError ? 'invalid marginZero' : 'valid'))}\n          placeholder=\"Number\"\n          onChange={(event) => setInputPhoneValue(event.target.value)}\n          value={inputPhoneValue}\n          onFocus={() => setIsInputPhoneFocus(true)}\n          onBlur={() => setIsInputPhoneFocus(false)}\n        />\n        <div className=\"tooltipDown\">\n          {currentField === 'phone' && (\n            <p className=\"tooltipDown__text\">\n              {messagesError[currentError]}\n            </p>\n          )}\n        </div>\n      </div>\n      <button type=\"submit\" className=\"btn formBuy__input formBuy__input_order btn-arrow\">\n        <span>\n          Order\n          <CloseIcon />\n        </span>\n      </button>\n    </form>\n  );\n};\n\nForm.propTypes = {\n  setIsOpen: PropTypes.func.isRequired,\n};\n","D:\\work\\GitHub\\workArea\\testTask\\tt_Halo__lab\\src\\Components\\Form\\index.js",["53"],{"ruleId":"54","replacedBy":"55"},{"ruleId":"56","replacedBy":"57"},{"ruleId":"58","replacedBy":"59"},{"ruleId":"60","replacedBy":"61"},{"ruleId":"62","replacedBy":"63"},{"ruleId":"64","replacedBy":"65"},{"ruleId":"66","severity":1,"message":"67","line":16,"column":23,"nodeType":"68","messageId":"69","endLine":16,"endColumn":33},{"ruleId":"70","severity":1,"message":"71","line":82,"column":7,"nodeType":"72","messageId":"69","endLine":82,"endColumn":18},{"ruleId":"73","severity":2,"message":"74","line":1,"column":1,"nodeType":"75","endLine":1,"endColumn":24},"lines-around-directive",["76"],"no-spaced-func",["77"],"global-require",[],"no-buffer-constructor",[],"no-new-require",[],"no-path-concat",[],"no-alert","Unexpected alert.","CallExpression","unexpected","no-console","Unexpected console statement.","MemberExpression","import/no-cycle","Dependency cycle detected.","ExportAllDeclaration","padding-line-between-statements","func-call-spacing"]